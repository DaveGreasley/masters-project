fn_name(fn,fn_current_function).
% fn start
fn_bb_nr(fn,3).
fn_edge_nr(fn,2).
bb_p(bb2).
% bb start
bb_freq(bb2,10000).
edge_src(ed0,bb0).
edge_dest(ed0,bb2).
edge_prob(ed0,100.0).
edge_flag(ed0,fallthru). 
edge_flag(ed0,exec). 
% bb end
% phi start
% phi end
bb_stmt_f(bb2,st0).
% stmt start
stmt_code(st0,gimple_assign).
stmt_num_ops(st0,2).
stmt_flag(st0,has_mem_ops).
assign_class(st0,single).
assign_subcode(st0,indirect_ref).
assign_lhs(st0,e0).
expr_class(e0,exceptional).
expr_code(e0,ssa_name).
type_p(e1).
expr_type(e0,e1). 
expr_class(e1,type).
expr_code(e1,real_type).
expr_code_len(e1,0).
expr_code_len(e0,0).
expr_ssa_name(e0,s33).
expr_ssa_var(e0,e2).
expr_class(e2,declaration).
expr_code(e2,var_decl).
expr_type(e2,e1). 
expr_code_len(e2,0).
var_p(v0).
expr_var(e2,v0). 
assign_rhs1(st0,e3).
expr_class(e3,reference).
expr_code(e3,indirect_ref).
expr_type(e3,e1). 
expr_code_len(e3,1).
expr_op_f(e3,e4).
expr_class(e4,exceptional).
expr_code(e4,ssa_name).
type_p(e5).
expr_type(e4,e5). 
expr_class(e5,type).
expr_code(e5,reference_type).
expr_flags(e5,public).
expr_type(e5,e1). 
expr_code_len(e5,0).
expr_code_len(e4,0).
expr_ssa_name(e4,s32).
expr_ssa_var(e4,e6).
expr_class(e6,declaration).
expr_code(e6,parm_decl).
expr_type(e6,e5). 
expr_code_len(e6,0).
var_p(v1).
expr_var(e6,v1). 
% stmt end
bb_stmt_n(bb2,st0,st1).
% stmt start
stmt_code(st1,gimple_assign).
stmt_num_ops(st1,3).
stmt_flag(st1,has_mem_ops).
assign_class(st1,binary).
assign_subcode(st1,mult_expr).
assign_lhs(st1,e7).
expr_class(e7,exceptional).
expr_code(e7,ssa_name).
expr_type(e7,e1). 
expr_code_len(e7,0).
expr_ssa_name(e7,s34).
expr_ssa_var(e7,e8).
expr_class(e8,declaration).
expr_code(e8,var_decl).
expr_type(e8,e1). 
expr_code_len(e8,0).
var_p(v2).
expr_var(e8,v2). 
assign_rhs1(st1,e9).
expr_class(e9,exceptional).
expr_code(e9,ssa_name).
expr_type(e9,e1). 
expr_code_len(e9,0).
expr_ssa_name(e9,s33).
expr_ssa_var(e9,e10).
expr_class(e10,declaration).
expr_code(e10,var_decl).
expr_type(e10,e1). 
expr_code_len(e10,0).
expr_var(e10,v0). 
assign_rhs2(st1,e11).
expr_class(e11,constant).
expr_code(e11,real_cst).
expr_flags(e11,constant).
expr_type(e11,e1). 
expr_code_len(e11,0).
% stmt end
bb_stmt_n(bb2,st1,st2).
% stmt start
stmt_code(st2,gimple_assign).
stmt_num_ops(st2,2).
stmt_flag(st2,has_mem_ops).
assign_class(st2,single).
assign_subcode(st2,indirect_ref).
assign_lhs(st2,e12).
expr_class(e12,exceptional).
expr_code(e12,ssa_name).
expr_type(e12,e1). 
expr_code_len(e12,0).
expr_ssa_name(e12,s36).
expr_ssa_var(e12,e13).
expr_class(e13,declaration).
expr_code(e13,var_decl).
expr_type(e13,e1). 
expr_code_len(e13,0).
var_p(v3).
expr_var(e13,v3). 
assign_rhs1(st2,e14).
expr_class(e14,reference).
expr_code(e14,indirect_ref).
expr_type(e14,e1). 
expr_code_len(e14,1).
expr_op_f(e14,e15).
expr_class(e15,exceptional).
expr_code(e15,ssa_name).
expr_type(e15,e5). 
expr_code_len(e15,0).
expr_ssa_name(e15,s35).
expr_ssa_var(e15,e16).
expr_class(e16,declaration).
expr_code(e16,parm_decl).
expr_type(e16,e5). 
expr_code_len(e16,0).
var_p(v4).
expr_var(e16,v4). 
% stmt end
bb_stmt_n(bb2,st2,st3).
% stmt start
stmt_code(st3,gimple_assign).
stmt_num_ops(st3,3).
stmt_flag(st3,has_mem_ops).
assign_class(st3,binary).
assign_subcode(st3,mult_expr).
assign_lhs(st3,e17).
expr_class(e17,exceptional).
expr_code(e17,ssa_name).
expr_type(e17,e1). 
expr_code_len(e17,0).
expr_ssa_name(e17,s37).
expr_ssa_var(e17,e18).
expr_class(e18,declaration).
expr_code(e18,var_decl).
expr_type(e18,e1). 
expr_code_len(e18,0).
var_p(v5).
expr_var(e18,v5). 
assign_rhs1(st3,e19).
expr_class(e19,exceptional).
expr_code(e19,ssa_name).
expr_type(e19,e1). 
expr_code_len(e19,0).
expr_ssa_name(e19,s36).
expr_ssa_var(e19,e20).
expr_class(e20,declaration).
expr_code(e20,var_decl).
expr_type(e20,e1). 
expr_code_len(e20,0).
expr_var(e20,v3). 
assign_rhs2(st3,e21).
expr_class(e21,constant).
expr_code(e21,real_cst).
expr_flags(e21,constant).
expr_type(e21,e1). 
expr_code_len(e21,0).
% stmt end
bb_stmt_n(bb2,st3,st4).
% stmt start
stmt_code(st4,gimple_assign).
stmt_num_ops(st4,2).
stmt_flag(st4,has_mem_ops).
assign_class(st4,single).
assign_subcode(st4,indirect_ref).
assign_lhs(st4,e22).
expr_class(e22,exceptional).
expr_code(e22,ssa_name).
type_p(e23).
expr_type(e22,e23). 
expr_class(e23,type).
expr_code(e23,integer_type).
expr_flags(e23,public).
expr_code_len(e23,0).
expr_int_size(e23,32).
expr_code_len(e22,0).
expr_ssa_name(e22,s38).
expr_ssa_var(e22,e24).
expr_class(e24,declaration).
expr_code(e24,var_decl).
expr_type(e24,e23). 
expr_code_len(e24,0).
var_p(v6).
expr_var(e24,v6). 
assign_rhs1(st4,e25).
expr_class(e25,reference).
expr_code(e25,indirect_ref).
expr_type(e25,e23). 
expr_code_len(e25,1).
expr_op_f(e25,e26).
expr_class(e26,exceptional).
expr_code(e26,ssa_name).
type_p(e27).
expr_type(e26,e27). 
expr_class(e27,type).
expr_code(e27,reference_type).
expr_flags(e27,public).
expr_type(e27,e23). 
expr_code_len(e27,0).
expr_code_len(e26,0).
expr_ssa_name(e26,s1).
expr_ssa_var(e26,e28).
expr_class(e28,declaration).
expr_code(e28,parm_decl).
expr_type(e28,e27). 
expr_code_len(e28,0).
var_p(v7).
expr_var(e28,v7). 
% stmt end
bb_stmt_n(bb2,st4,st5).
% stmt start
stmt_code(st5,gimple_assign).
stmt_num_ops(st5,2).
stmt_flag(st5,has_mem_ops).
assign_class(st5,single).
assign_subcode(st5,ssa_name).
assign_lhs(st5,e29).
expr_class(e29,reference).
expr_code(e29,component_ref).
expr_type(e29,e5). 
expr_code_len(e29,3).
expr_op_f(e29,e30).
expr_class(e30,declaration).
expr_code(e30,var_decl).
expr_flags(e30,adddresable).
type_p(e31).
expr_type(e30,e31). 
expr_class(e31,type).
expr_code(e31,record_type).
expr_code_len(e31,0).
expr_code_len(e30,0).
var_p(v8).
expr_var(e30,v8). 
expr_op_n(e29,e30,e32).
expr_class(e32,declaration).
expr_code(e32,field_decl).
expr_type(e32,e5). 
expr_code_len(e32,0).
var_p(v9).
expr_var(e32,v9). 
assign_rhs1(st5,e33).
expr_class(e33,exceptional).
expr_code(e33,ssa_name).
expr_type(e33,e5). 
expr_code_len(e33,0).
expr_ssa_name(e33,s32).
expr_ssa_var(e33,e34).
expr_class(e34,declaration).
expr_code(e34,parm_decl).
expr_type(e34,e5). 
expr_code_len(e34,0).
expr_var(e34,v1). 
% stmt end
bb_stmt_n(bb2,st5,st6).
% stmt start
stmt_code(st6,gimple_assign).
stmt_num_ops(st6,2).
stmt_flag(st6,has_mem_ops).
assign_class(st6,single).
assign_subcode(st6,ssa_name).
assign_lhs(st6,e35).
expr_class(e35,reference).
expr_code(e35,component_ref).
expr_type(e35,e1). 
expr_code_len(e35,3).
expr_op_f(e35,e36).
expr_class(e36,declaration).
expr_code(e36,var_decl).
expr_flags(e36,adddresable).
expr_type(e36,e31). 
expr_code_len(e36,0).
expr_var(e36,v8). 
expr_op_n(e35,e36,e37).
expr_class(e37,declaration).
expr_code(e37,field_decl).
expr_type(e37,e1). 
expr_code_len(e37,0).
var_p(v10).
expr_var(e37,v10). 
assign_rhs1(st6,e38).
expr_class(e38,exceptional).
expr_code(e38,ssa_name).
expr_type(e38,e1). 
expr_code_len(e38,0).
expr_ssa_name(e38,s34).
expr_ssa_var(e38,e39).
expr_class(e39,declaration).
expr_code(e39,var_decl).
expr_type(e39,e1). 
expr_code_len(e39,0).
expr_var(e39,v2). 
% stmt end
bb_stmt_n(bb2,st6,st7).
% stmt start
stmt_code(st7,gimple_assign).
stmt_num_ops(st7,2).
stmt_flag(st7,has_mem_ops).
assign_class(st7,single).
assign_subcode(st7,ssa_name).
assign_lhs(st7,e40).
expr_class(e40,reference).
expr_code(e40,component_ref).
expr_type(e40,e1). 
expr_code_len(e40,3).
expr_op_f(e40,e41).
expr_class(e41,declaration).
expr_code(e41,var_decl).
expr_flags(e41,adddresable).
expr_type(e41,e31). 
expr_code_len(e41,0).
expr_var(e41,v8). 
expr_op_n(e40,e41,e42).
expr_class(e42,declaration).
expr_code(e42,field_decl).
expr_type(e42,e1). 
expr_code_len(e42,0).
var_p(v11).
expr_var(e42,v11). 
assign_rhs1(st7,e43).
expr_class(e43,exceptional).
expr_code(e43,ssa_name).
expr_type(e43,e1). 
expr_code_len(e43,0).
expr_ssa_name(e43,s37).
expr_ssa_var(e43,e44).
expr_class(e44,declaration).
expr_code(e44,var_decl).
expr_type(e44,e1). 
expr_code_len(e44,0).
expr_var(e44,v5). 
% stmt end
bb_stmt_n(bb2,st7,st8).
% stmt start
stmt_code(st8,gimple_assign).
stmt_num_ops(st8,2).
stmt_flag(st8,has_mem_ops).
assign_class(st8,single).
assign_subcode(st8,ssa_name).
assign_lhs(st8,e45).
expr_class(e45,reference).
expr_code(e45,component_ref).
type_p(e46).
expr_type(e45,e46). 
expr_class(e46,type).
expr_code(e46,pointer_type).
type_p(e47).
expr_type(e46,e47). 
expr_class(e47,type).
expr_code(e47,array_type).
expr_type(e47,e1). 
expr_code_len(e47,0).
expr_code_len(e46,0).
expr_code_len(e45,3).
expr_op_f(e45,e48).
expr_class(e48,declaration).
expr_code(e48,var_decl).
expr_flags(e48,adddresable).
expr_type(e48,e31). 
expr_code_len(e48,0).
expr_var(e48,v8). 
expr_op_n(e45,e48,e49).
expr_class(e49,declaration).
expr_code(e49,field_decl).
expr_type(e49,e46). 
expr_code_len(e49,0).
var_p(v12).
expr_var(e49,v12). 
assign_rhs1(st8,e50).
expr_class(e50,exceptional).
expr_code(e50,ssa_name).
expr_type(e50,e46). 
expr_code_len(e50,0).
expr_ssa_name(e50,s39).
expr_ssa_var(e50,e51).
expr_class(e51,declaration).
expr_code(e51,parm_decl).
expr_type(e51,e46). 
expr_code_len(e51,0).
var_p(v13).
expr_var(e51,v13). 
% stmt end
bb_stmt_n(bb2,st8,st9).
% stmt start
stmt_code(st9,gimple_assign).
stmt_num_ops(st9,2).
stmt_flag(st9,has_mem_ops).
assign_class(st9,single).
assign_subcode(st9,ssa_name).
assign_lhs(st9,e52).
expr_class(e52,reference).
expr_code(e52,component_ref).
type_p(e53).
expr_type(e52,e53). 
expr_class(e53,type).
expr_code(e53,pointer_type).
type_p(e54).
expr_type(e53,e54). 
expr_class(e54,type).
expr_code(e54,array_type).
expr_type(e54,e1). 
expr_code_len(e54,0).
expr_code_len(e53,0).
expr_code_len(e52,3).
expr_op_f(e52,e55).
expr_class(e55,declaration).
expr_code(e55,var_decl).
expr_flags(e55,adddresable).
expr_type(e55,e31). 
expr_code_len(e55,0).
expr_var(e55,v8). 
expr_op_n(e52,e55,e56).
expr_class(e56,declaration).
expr_code(e56,field_decl).
expr_type(e56,e53). 
expr_code_len(e56,0).
var_p(v14).
expr_var(e56,v14). 
assign_rhs1(st9,e57).
expr_class(e57,exceptional).
expr_code(e57,ssa_name).
expr_type(e57,e53). 
expr_code_len(e57,0).
expr_ssa_name(e57,s40).
expr_ssa_var(e57,e58).
expr_class(e58,declaration).
expr_code(e58,parm_decl).
expr_type(e58,e53). 
expr_code_len(e58,0).
var_p(v15).
expr_var(e58,v15). 
% stmt end
bb_stmt_n(bb2,st9,st10).
% stmt start
stmt_code(st10,gimple_assign).
stmt_num_ops(st10,2).
stmt_flag(st10,has_mem_ops).
assign_class(st10,single).
assign_subcode(st10,ssa_name).
assign_lhs(st10,e59).
expr_class(e59,reference).
expr_code(e59,component_ref).
type_p(e60).
expr_type(e59,e60). 
expr_class(e60,type).
expr_code(e60,pointer_type).
type_p(e61).
expr_type(e60,e61). 
expr_class(e61,type).
expr_code(e61,array_type).
expr_type(e61,e23). 
expr_code_len(e61,0).
expr_code_len(e60,0).
expr_code_len(e59,3).
expr_op_f(e59,e62).
expr_class(e62,declaration).
expr_code(e62,var_decl).
expr_flags(e62,adddresable).
expr_type(e62,e31). 
expr_code_len(e62,0).
expr_var(e62,v8). 
expr_op_n(e59,e62,e63).
expr_class(e63,declaration).
expr_code(e63,field_decl).
expr_type(e63,e60). 
expr_code_len(e63,0).
var_p(v16).
expr_var(e63,v16). 
assign_rhs1(st10,e64).
expr_class(e64,exceptional).
expr_code(e64,ssa_name).
expr_type(e64,e60). 
expr_code_len(e64,0).
expr_ssa_name(e64,s41).
expr_ssa_var(e64,e65).
expr_class(e65,declaration).
expr_code(e65,parm_decl).
expr_type(e65,e60). 
expr_code_len(e65,0).
var_p(v17).
expr_var(e65,v17). 
% stmt end
bb_stmt_n(bb2,st10,st11).
% stmt start
stmt_code(st11,gimple_assign).
stmt_num_ops(st11,2).
stmt_flag(st11,has_mem_ops).
assign_class(st11,single).
assign_subcode(st11,ssa_name).
assign_lhs(st11,e66).
expr_class(e66,reference).
expr_code(e66,component_ref).
expr_type(e66,e27). 
expr_code_len(e66,3).
expr_op_f(e66,e67).
expr_class(e67,declaration).
expr_code(e67,var_decl).
expr_flags(e67,adddresable).
expr_type(e67,e31). 
expr_code_len(e67,0).
expr_var(e67,v8). 
expr_op_n(e66,e67,e68).
expr_class(e68,declaration).
expr_code(e68,field_decl).
expr_type(e68,e27). 
expr_code_len(e68,0).
var_p(v18).
expr_var(e68,v18). 
assign_rhs1(st11,e69).
expr_class(e69,exceptional).
expr_code(e69,ssa_name).
expr_type(e69,e27). 
expr_code_len(e69,0).
expr_ssa_name(e69,s1).
expr_ssa_var(e69,e70).
expr_class(e70,declaration).
expr_code(e70,parm_decl).
expr_type(e70,e27). 
expr_code_len(e70,0).
expr_var(e70,v7). 
% stmt end
bb_stmt_n(bb2,st11,st12).
% stmt start
stmt_code(st12,gimple_assign).
stmt_num_ops(st12,2).
stmt_flag(st12,has_mem_ops).
assign_class(st12,single).
assign_subcode(st12,ssa_name).
assign_lhs(st12,e71).
expr_class(e71,reference).
expr_code(e71,component_ref).
expr_type(e71,e23). 
expr_code_len(e71,3).
expr_op_f(e71,e72).
expr_class(e72,declaration).
expr_code(e72,var_decl).
expr_flags(e72,adddresable).
expr_type(e72,e31). 
expr_code_len(e72,0).
expr_var(e72,v8). 
expr_op_n(e71,e72,e73).
expr_class(e73,declaration).
expr_code(e73,field_decl).
expr_type(e73,e23). 
expr_code_len(e73,0).
var_p(v19).
expr_var(e73,v19). 
assign_rhs1(st12,e74).
expr_class(e74,exceptional).
expr_code(e74,ssa_name).
expr_type(e74,e23). 
expr_code_len(e74,0).
expr_ssa_name(e74,s38).
expr_ssa_var(e74,e75).
expr_class(e75,declaration).
expr_code(e75,var_decl).
expr_type(e75,e23). 
expr_code_len(e75,0).
expr_var(e75,v6). 
% stmt end
bb_stmt_n(bb2,st12,st13).
% stmt start
stmt_code(st13,gimple_call).
stmt_num_ops(st13,6).
stmt_flag(st13,has_mem_ops).
call_num_args(st13,3).
call_lhs(st13,e76).
call_fn(st13,e77).
expr_class(e77,expression).
expr_code(e77,addr_expr).
expr_flags(e77,constant).
type_p(e78).
expr_type(e77,e78). 
expr_class(e78,type).
expr_code(e78,pointer_type).
type_p(e79).
expr_type(e78,e79). 
expr_class(e79,type).
expr_code(e79,function_type).
type_p(e80).
expr_type(e79,e80). 
expr_class(e80,type).
expr_code(e80,void_type).
expr_code_len(e80,0).
expr_code_len(e79,0).
expr_code_len(e78,0).
expr_code_len(e77,1).
expr_op_f(e77,e81).
expr_class(e81,declaration).
expr_code(e81,function_decl).
expr_flags(e81,adddresable).
expr_flags(e81,nothrow).
expr_flags(e81,public).
expr_type(e81,e79). 
expr_code_len(e81,0).
var_p(v20).
expr_var(e81,v20). 
call_treturn(st13,e82).
expr_class(e82,type).
expr_code(e82,void_type).
expr_code_len(e82,0).
call_arg(st13,e83).
expr_class(e83,expression).
expr_code(e83,addr_expr).
expr_flags(e83,constant).
type_p(e84).
expr_type(e83,e84). 
expr_class(e84,type).
expr_code(e84,pointer_type).
type_p(e85).
expr_type(e84,e85). 
expr_class(e85,type).
expr_code(e85,function_type).
expr_type(e85,e80). 
expr_code_len(e85,0).
expr_code_len(e84,0).
expr_code_len(e83,1).
expr_op_f(e83,e86).
expr_class(e86,declaration).
expr_code(e86,function_decl).
expr_flags(e86,adddresable).
expr_flags(e86,static).
expr_flags(e86,nothrow).
expr_type(e86,e85). 
expr_code_len(e86,0).
var_p(v21).
expr_var(e86,v21). 
call_arg(st13,e87).
expr_class(e87,expression).
expr_code(e87,addr_expr).
type_p(e88).
expr_type(e87,e88). 
expr_class(e88,type).
expr_code(e88,pointer_type).
expr_type(e88,e31). 
expr_code_len(e88,0).
expr_code_len(e87,1).
expr_op_f(e87,e89).
expr_class(e89,declaration).
expr_code(e89,var_decl).
expr_flags(e89,adddresable).
expr_type(e89,e31). 
expr_code_len(e89,0).
expr_var(e89,v8). 
call_arg(st13,e90).
expr_class(e90,constant).
expr_code(e90,integer_cst).
expr_flags(e90,constant).
type_p(e91).
expr_type(e90,e91). 
expr_class(e91,type).
expr_code(e91,integer_type).
expr_flags(e91,public).
expr_code_len(e91,0).
expr_int_size(e91,32).
expr_code_len(e90,0).
expr_intcst_val(e90,0).
% stmt end
bb_stmt_n(bb2,st13,st14).
% stmt start
stmt_code(st14,gimple_call).
stmt_num_ops(st14,4).
stmt_flag(st14,has_mem_ops).
call_num_args(st14,1).
call_lhs(st14,e92).
call_fn(st14,e93).
expr_class(e93,expression).
expr_code(e93,addr_expr).
expr_flags(e93,constant).
expr_type(e93,e84). 
expr_code_len(e93,1).
expr_op_f(e93,e94).
expr_class(e94,declaration).
expr_code(e94,function_decl).
expr_flags(e94,adddresable).
expr_flags(e94,static).
expr_flags(e94,nothrow).
expr_type(e94,e85). 
expr_code_len(e94,0).
expr_var(e94,v21). 
call_treturn(st14,e95).
expr_class(e95,type).
expr_code(e95,void_type).
expr_code_len(e95,0).
call_arg(st14,e96).
expr_class(e96,expression).
expr_code(e96,addr_expr).
expr_type(e96,e88). 
expr_code_len(e96,1).
expr_op_f(e96,e97).
expr_class(e97,declaration).
expr_code(e97,var_decl).
expr_flags(e97,adddresable).
expr_type(e97,e31). 
expr_code_len(e97,0).
expr_var(e97,v8). 
% stmt end
bb_stmt_n(bb2,st14,st15).
% stmt start
stmt_code(st15,gimple_call).
stmt_num_ops(st15,3).
stmt_flag(st15,has_mem_ops).
call_num_args(st15,0).
call_lhs(st15,e98).
call_fn(st15,e99).
expr_class(e99,expression).
expr_code(e99,addr_expr).
expr_flags(e99,constant).
type_p(e100).
expr_type(e99,e100). 
expr_class(e100,type).
expr_code(e100,pointer_type).
type_p(e101).
expr_type(e100,e101). 
expr_class(e101,type).
expr_code(e101,function_type).
expr_type(e101,e80). 
expr_code_len(e101,0).
expr_code_len(e100,0).
expr_code_len(e99,1).
expr_op_f(e99,e102).
expr_class(e102,declaration).
expr_code(e102,function_decl).
expr_flags(e102,adddresable).
expr_flags(e102,nothrow).
expr_flags(e102,public).
expr_type(e102,e101). 
expr_code_len(e102,0).
var_p(v22).
expr_var(e102,v22). 
call_treturn(st15,e103).
expr_class(e103,type).
expr_code(e103,void_type).
expr_code_len(e103,0).
% stmt end
bb_stmt_n(bb2,st15,st16).
% stmt start
stmt_code(st16,gimple_return).
stmt_num_ops(st16,1).
stmt_flag(st16,has_mem_ops).
% stmt end
% fn end
expr_int_size(noe10,_).

expr_intcst_val(noe11,_).

expr_lst_f(noe0,_).

expr_lst_n(noe1,_,noe2).

expr_op_f(noe3,_).

expr_op_n(noe4,_,noe5).

expr_ssa_name(noe12,nos0).

expr_ssa_var(noe13,noe14).

edge_flags(noed0,noflag0).

bb_stmt_f(nobb0,noe6).

bb_stmt_n(nobb1,_,noe7).

phi_bb(nophi0,nobb2).

phi_len(nophi1,0).

phi_result(nophi2,noe8).

phi_arg(nophi3,noe9).

var_p(nov0).

call_arg(nocall0,noarg0).

expr_code(noe_44,E):- E = nocode_44.

