fn_name(fn,fn_current_function).
% fn start
fn_bb_nr(fn,3).
fn_edge_nr(fn,2).
bb_p(bb2).
% bb start
bb_freq(bb2,10000).
edge_src(ed0,bb0).
edge_dest(ed0,bb2).
edge_prob(ed0,100.0).
edge_flag(ed0,fallthru). 
edge_flag(ed0,exec). 
% bb end
% phi start
% phi end
bb_stmt_f(bb2,st0).
% stmt start
stmt_code(st0,gimple_assign).
stmt_num_ops(st0,2).
stmt_flag(st0,has_mem_ops).
assign_class(st0,single).
assign_subcode(st0,integer_cst).
assign_lhs(st0,e0).
expr_class(e0,declaration).
expr_code(e0,var_decl).
expr_flags(e0,adddresable).
expr_flags(e0,static).
expr_flags(e0,public).
type_p(e1).
expr_type(e0,e1). 
expr_class(e1,type).
expr_code(e1,integer_type).
expr_flags(e1,constant).
expr_flags(e1,public).
expr_code_len(e1,0).
expr_int_size(e1,32).
expr_code_len(e0,0).
var_p(v0).
expr_var(e0,v0). 
assign_rhs1(st0,e2).
expr_class(e2,constant).
expr_code(e2,integer_cst).
expr_flags(e2,constant).
expr_type(e2,e1). 
expr_code_len(e2,0).
expr_intcst_val(e2,0).
% stmt end
bb_stmt_n(bb2,st0,st1).
% stmt start
stmt_code(st1,gimple_assign).
stmt_num_ops(st1,2).
stmt_flag(st1,has_mem_ops).
assign_class(st1,single).
assign_subcode(st1,integer_cst).
assign_lhs(st1,e3).
expr_class(e3,declaration).
expr_code(e3,var_decl).
expr_flags(e3,adddresable).
expr_flags(e3,static).
expr_flags(e3,public).
expr_type(e3,e1). 
expr_code_len(e3,0).
var_p(v1).
expr_var(e3,v1). 
assign_rhs1(st1,e4).
expr_class(e4,constant).
expr_code(e4,integer_cst).
expr_flags(e4,constant).
expr_type(e4,e1). 
expr_code_len(e4,0).
expr_intcst_val(e4,0).
% stmt end
bb_stmt_n(bb2,st1,st2).
% stmt start
stmt_code(st2,gimple_call).
stmt_num_ops(st2,5).
stmt_flag(st2,has_mem_ops).
call_num_args(st2,2).
call_lhs(st2,e5).
call_fn(st2,e6).
expr_class(e6,expression).
expr_code(e6,addr_expr).
expr_flags(e6,constant).
type_p(e7).
expr_type(e6,e7). 
expr_class(e7,type).
expr_code(e7,pointer_type).
type_p(e8).
expr_type(e7,e8). 
expr_class(e8,type).
expr_code(e8,function_type).
type_p(e9).
expr_type(e8,e9). 
expr_class(e9,type).
expr_code(e9,void_type).
expr_code_len(e9,0).
expr_code_len(e8,0).
expr_code_len(e7,0).
expr_code_len(e6,1).
expr_op_f(e6,e10).
expr_class(e10,declaration).
expr_code(e10,function_decl).
expr_flags(e10,adddresable).
expr_flags(e10,static).
expr_flags(e10,public).
expr_type(e10,e8). 
expr_code_len(e10,0).
var_p(v2).
expr_var(e10,v2). 
call_treturn(st2,e11).
expr_class(e11,type).
expr_code(e11,void_type).
expr_code_len(e11,0).
call_arg(st2,e12).
expr_class(e12,exceptional).
expr_code(e12,ssa_name).
expr_type(e12,e1). 
expr_code_len(e12,0).
expr_ssa_name(e12,s1).
expr_ssa_var(e12,e13).
expr_class(e13,declaration).
expr_code(e13,parm_decl).
expr_type(e13,e1). 
expr_code_len(e13,0).
var_p(v3).
expr_var(e13,v3). 
call_arg(st2,e14).
expr_class(e14,exceptional).
expr_code(e14,ssa_name).
type_p(e15).
expr_type(e14,e15). 
expr_class(e15,type).
expr_code(e15,pointer_type).
expr_flags(e15,public).
type_p(e16).
expr_type(e15,e16). 
expr_class(e16,type).
expr_code(e16,pointer_type).
expr_flags(e16,constant).
expr_flags(e16,public).
type_p(e17).
expr_type(e16,e17). 
expr_class(e17,type).
expr_code(e17,integer_type).
expr_flags(e17,constant).
expr_flags(e17,public).
expr_code_len(e17,0).
expr_int_size(e17,8).
expr_code_len(e16,0).
expr_code_len(e15,0).
expr_code_len(e14,0).
expr_ssa_name(e14,s2).
expr_ssa_var(e14,e18).
expr_class(e18,declaration).
expr_code(e18,parm_decl).
expr_type(e18,e15). 
expr_code_len(e18,0).
var_p(v4).
expr_var(e18,v4). 
% stmt end
bb_stmt_n(bb2,st2,st3).
% stmt start
stmt_code(st3,gimple_return).
stmt_num_ops(st3,1).
stmt_flag(st3,has_mem_ops).
stmt_op(st3,e19).
expr_class(e19,constant).
expr_code(e19,integer_cst).
expr_flags(e19,constant).
expr_type(e19,e1). 
expr_code_len(e19,0).
expr_intcst_val(e19,0).
% stmt end
% fn end
expr_int_size(noe10,_).

expr_intcst_val(noe11,_).

expr_lst_f(noe0,_).

expr_lst_n(noe1,_,noe2).

expr_op_f(noe3,_).

expr_op_n(noe4,_,noe5).

expr_ssa_name(noe12,nos0).

expr_ssa_var(noe13,noe14).

edge_flags(noed0,noflag0).

bb_stmt_f(nobb0,noe6).

bb_stmt_n(nobb1,_,noe7).

phi_bb(nophi0,nobb2).

phi_len(nophi1,0).

phi_result(nophi2,noe8).

phi_arg(nophi3,noe9).

var_p(nov0).

call_arg(nocall0,noarg0).

expr_code(noe_44,E):- E = nocode_44.

